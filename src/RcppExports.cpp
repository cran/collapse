// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// TRACpp
SEXP TRACpp(const SEXP& x, const SEXP& xAG, const IntegerVector& g, int ret);
RcppExport SEXP _collapse_TRACpp(SEXP xSEXP, SEXP xAGSEXP, SEXP gSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type xAG(xAGSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(TRACpp(x, xAG, g, ret));
    return rcpp_result_gen;
END_RCPP
}
// TRAmCpp
SEXP TRAmCpp(const SEXP& x, const SEXP& xAG, const IntegerVector& g, int ret);
RcppExport SEXP _collapse_TRAmCpp(SEXP xSEXP, SEXP xAGSEXP, SEXP gSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type xAG(xAGSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(TRAmCpp(x, xAG, g, ret));
    return rcpp_result_gen;
END_RCPP
}
// TRAlCpp
List TRAlCpp(const List& x, const SEXP& xAG, const IntegerVector& g, int ret);
RcppExport SEXP _collapse_TRAlCpp(SEXP xSEXP, SEXP xAGSEXP, SEXP gSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type xAG(xAGSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(TRAlCpp(x, xAG, g, ret));
    return rcpp_result_gen;
END_RCPP
}
// fNdistinctCpp
SEXP fNdistinctCpp(SEXP x, int ng, IntegerVector g, SEXP gs, bool narm);
RcppExport SEXP _collapse_fNdistinctCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fNdistinctCpp(x, ng, g, gs, narm));
    return rcpp_result_gen;
END_RCPP
}
// fNdistinctlCpp
SEXP fNdistinctlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, bool narm, bool drop);
RcppExport SEXP _collapse_fNdistinctlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fNdistinctlCpp(x, ng, g, gs, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fNdistinctmCpp
SEXP fNdistinctmCpp(SEXP x, int ng, IntegerVector g, SEXP gs, bool narm, bool drop);
RcppExport SEXP _collapse_fNdistinctmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fNdistinctmCpp(x, ng, g, gs, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fNobsCpp
IntegerVector fNobsCpp(const SEXP& x, int ng, const IntegerVector& g);
RcppExport SEXP _collapse_fNobsCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(fNobsCpp(x, ng, g));
    return rcpp_result_gen;
END_RCPP
}
// fNobsmCpp
SEXP fNobsmCpp(const SEXP& x, int ng, const IntegerVector& g, bool drop);
RcppExport SEXP _collapse_fNobsmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fNobsmCpp(x, ng, g, drop));
    return rcpp_result_gen;
END_RCPP
}
// fNobslCpp
SEXP fNobslCpp(const List& x, int ng, const IntegerVector& g, bool drop);
RcppExport SEXP _collapse_fNobslCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fNobslCpp(x, ng, g, drop));
    return rcpp_result_gen;
END_RCPP
}
// BWCpp
NumericVector BWCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, double set_mean, bool B, bool fill);
RcppExport SEXP _collapse_BWCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP set_meanSEXP, SEXP BSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type B(BSEXP);
    Rcpp::traits::input_parameter< bool >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(BWCpp(x, ng, g, gs, w, narm, set_mean, B, fill));
    return rcpp_result_gen;
END_RCPP
}
// BWmCpp
NumericMatrix BWmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, double set_mean, bool B, bool fill);
RcppExport SEXP _collapse_BWmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP set_meanSEXP, SEXP BSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type B(BSEXP);
    Rcpp::traits::input_parameter< bool >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(BWmCpp(x, ng, g, gs, w, narm, set_mean, B, fill));
    return rcpp_result_gen;
END_RCPP
}
// BWlCpp
List BWlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, double set_mean, bool B, bool fill);
RcppExport SEXP _collapse_BWlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP set_meanSEXP, SEXP BSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< bool >::type B(BSEXP);
    Rcpp::traits::input_parameter< bool >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(BWlCpp(x, ng, g, gs, w, narm, set_mean, B, fill));
    return rcpp_result_gen;
END_RCPP
}
// fbstatsCpp
SEXP fbstatsCpp(const NumericVector& x, bool ext, int ng, const IntegerVector& g, int npg, const IntegerVector& pg, const SEXP& w, bool array, bool setn, const SEXP& gn);
RcppExport SEXP _collapse_fbstatsCpp(SEXP xSEXP, SEXP extSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP npgSEXP, SEXP pgSEXP, SEXP wSEXP, SEXP arraySEXP, SEXP setnSEXP, SEXP gnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type npg(npgSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type array(arraySEXP);
    Rcpp::traits::input_parameter< bool >::type setn(setnSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gn(gnSEXP);
    rcpp_result_gen = Rcpp::wrap(fbstatsCpp(x, ext, ng, g, npg, pg, w, array, setn, gn));
    return rcpp_result_gen;
END_RCPP
}
// fbstatsmCpp
SEXP fbstatsmCpp(const NumericMatrix& x, bool ext, int ng, const IntegerVector& g, int npg, const IntegerVector& pg, const SEXP& w, bool array, const SEXP& gn);
RcppExport SEXP _collapse_fbstatsmCpp(SEXP xSEXP, SEXP extSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP npgSEXP, SEXP pgSEXP, SEXP wSEXP, SEXP arraySEXP, SEXP gnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type npg(npgSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type array(arraySEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gn(gnSEXP);
    rcpp_result_gen = Rcpp::wrap(fbstatsmCpp(x, ext, ng, g, npg, pg, w, array, gn));
    return rcpp_result_gen;
END_RCPP
}
// fbstatslCpp
SEXP fbstatslCpp(const List& x, bool ext, int ng, const IntegerVector& g, int npg, const IntegerVector& pg, const SEXP& w, bool array, const SEXP& gn);
RcppExport SEXP _collapse_fbstatslCpp(SEXP xSEXP, SEXP extSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP npgSEXP, SEXP pgSEXP, SEXP wSEXP, SEXP arraySEXP, SEXP gnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type npg(npgSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type array(arraySEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gn(gnSEXP);
    rcpp_result_gen = Rcpp::wrap(fbstatslCpp(x, ext, ng, g, npg, pg, w, array, gn));
    return rcpp_result_gen;
END_RCPP
}
// fdiffgrowthCpp
NumericVector fdiffgrowthCpp(const NumericVector& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, int ret, double rho, bool names);
RcppExport SEXP _collapse_fdiffgrowthCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP retSEXP, SEXP rhoSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fdiffgrowthCpp(x, n, diff, fill, ng, g, gs, t, ret, rho, names));
    return rcpp_result_gen;
END_RCPP
}
// fdiffgrowthmCpp
NumericMatrix fdiffgrowthmCpp(const NumericMatrix& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, int ret, double rho, bool names);
RcppExport SEXP _collapse_fdiffgrowthmCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP retSEXP, SEXP rhoSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fdiffgrowthmCpp(x, n, diff, fill, ng, g, gs, t, ret, rho, names));
    return rcpp_result_gen;
END_RCPP
}
// fdiffgrowthlCpp
List fdiffgrowthlCpp(const List& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, int ret, double rho, bool names);
RcppExport SEXP _collapse_fdiffgrowthlCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP retSEXP, SEXP rhoSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fdiffgrowthlCpp(x, n, diff, fill, ng, g, gs, t, ret, rho, names));
    return rcpp_result_gen;
END_RCPP
}
// ffirstCpp
SEXP ffirstCpp(SEXP x, int ng, IntegerVector g, bool narm);
RcppExport SEXP _collapse_ffirstCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(ffirstCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// ffirstmCpp
SEXP ffirstmCpp(SEXP x, int ng, IntegerVector g, bool narm, bool drop);
RcppExport SEXP _collapse_ffirstmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(ffirstmCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// ffirstlCpp
SEXP ffirstlCpp(const List& x, int ng, const IntegerVector& g, bool narm);
RcppExport SEXP _collapse_ffirstlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(ffirstlCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// flagleadCpp
SEXP flagleadCpp(SEXP x, IntegerVector n, SEXP fill, int ng, IntegerVector g, SEXP gs, SEXP t, bool names);
RcppExport SEXP _collapse_flagleadCpp(SEXP xSEXP, SEXP nSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(flagleadCpp(x, n, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// flagleadmCpp
SEXP flagleadmCpp(SEXP x, IntegerVector n, SEXP fill, int ng, IntegerVector g, SEXP gs, SEXP t, bool names);
RcppExport SEXP _collapse_flagleadmCpp(SEXP xSEXP, SEXP nSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(flagleadmCpp(x, n, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// flagleadlCpp
List flagleadlCpp(const List& x, const IntegerVector& n, const SEXP& fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, bool names);
RcppExport SEXP _collapse_flagleadlCpp(SEXP xSEXP, SEXP nSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(flagleadlCpp(x, n, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// flastCpp
SEXP flastCpp(SEXP x, int ng, IntegerVector g, bool narm);
RcppExport SEXP _collapse_flastCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(flastCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// flastmCpp
SEXP flastmCpp(SEXP x, int ng, IntegerVector g, bool narm, bool drop);
RcppExport SEXP _collapse_flastmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(flastmCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// flastlCpp
SEXP flastlCpp(const List& x, int ng, const IntegerVector& g, bool narm);
RcppExport SEXP _collapse_flastlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(flastlCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmeanCpp
NumericVector fmeanCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm);
RcppExport SEXP _collapse_fmeanCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeanCpp(x, ng, g, gs, w, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmeanmCpp
SEXP fmeanmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool drop);
RcppExport SEXP _collapse_fmeanmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeanmCpp(x, ng, g, gs, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmeanlCpp
SEXP fmeanlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool drop);
RcppExport SEXP _collapse_fmeanlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeanlCpp(x, ng, g, gs, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmedianCpp
NumericVector fmedianCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, bool narm);
RcppExport SEXP _collapse_fmedianCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmedianCpp(x, ng, g, gs, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmedianmCpp
SEXP fmedianmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& gs, bool narm, bool drop);
RcppExport SEXP _collapse_fmedianmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmedianmCpp(x, ng, g, gs, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmedianlCpp
SEXP fmedianlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, bool narm, bool drop);
RcppExport SEXP _collapse_fmedianlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmedianlCpp(x, ng, g, gs, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fminmaxCpp
NumericVector fminmaxCpp(const NumericVector& x, int ng, const IntegerVector& g, bool narm, int ret);
RcppExport SEXP _collapse_fminmaxCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fminmaxCpp(x, ng, g, narm, ret));
    return rcpp_result_gen;
END_RCPP
}
// fminmaxmCpp
SEXP fminmaxmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, bool narm, bool drop, int ret);
RcppExport SEXP _collapse_fminmaxmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fminmaxmCpp(x, ng, g, narm, drop, ret));
    return rcpp_result_gen;
END_RCPP
}
// fminmaxlCpp
SEXP fminmaxlCpp(const List& x, int ng, const IntegerVector& g, bool narm, bool drop, int ret);
RcppExport SEXP _collapse_fminmaxlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fminmaxlCpp(x, ng, g, narm, drop, ret));
    return rcpp_result_gen;
END_RCPP
}
// fmodeCpp
SEXP fmodeCpp(SEXP x, int ng, IntegerVector g, SEXP gs, SEXP w, bool narm);
RcppExport SEXP _collapse_fmodeCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodeCpp(x, ng, g, gs, w, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmodelCpp
SEXP fmodelCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm);
RcppExport SEXP _collapse_fmodelCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodelCpp(x, ng, g, gs, w, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmodemCpp
SEXP fmodemCpp(SEXP x, int ng, IntegerVector g, SEXP gs, SEXP w, bool narm, bool drop);
RcppExport SEXP _collapse_fmodemCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodemCpp(x, ng, g, gs, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fprodCpp
NumericVector fprodCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& w, bool narm);
RcppExport SEXP _collapse_fprodCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fprodCpp(x, ng, g, w, narm));
    return rcpp_result_gen;
END_RCPP
}
// fprodmCpp
SEXP fprodmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& w, bool narm, bool drop);
RcppExport SEXP _collapse_fprodmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fprodmCpp(x, ng, g, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fprodlCpp
SEXP fprodlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& w, bool narm, bool drop);
RcppExport SEXP _collapse_fprodlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fprodlCpp(x, ng, g, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fscaleCpp
NumericVector fscaleCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& w, bool narm, double set_mean, double set_sd);
RcppExport SEXP _collapse_fscaleCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP set_meanSEXP, SEXP set_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< double >::type set_sd(set_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fscaleCpp(x, ng, g, w, narm, set_mean, set_sd));
    return rcpp_result_gen;
END_RCPP
}
// fscalemCpp
NumericMatrix fscalemCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& w, bool narm, double set_mean, double set_sd);
RcppExport SEXP _collapse_fscalemCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP set_meanSEXP, SEXP set_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< double >::type set_sd(set_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fscalemCpp(x, ng, g, w, narm, set_mean, set_sd));
    return rcpp_result_gen;
END_RCPP
}
// fscalelCpp
List fscalelCpp(const List& x, int ng, const IntegerVector& g, const SEXP& w, bool narm, double set_mean, double set_sd);
RcppExport SEXP _collapse_fscalelCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP set_meanSEXP, SEXP set_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< double >::type set_mean(set_meanSEXP);
    Rcpp::traits::input_parameter< double >::type set_sd(set_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fscalelCpp(x, ng, g, w, narm, set_mean, set_sd));
    return rcpp_result_gen;
END_RCPP
}
// fsumCpp
NumericVector fsumCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& w, bool narm);
RcppExport SEXP _collapse_fsumCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fsumCpp(x, ng, g, w, narm));
    return rcpp_result_gen;
END_RCPP
}
// fsummCpp
SEXP fsummCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& w, bool narm, bool drop);
RcppExport SEXP _collapse_fsummCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fsummCpp(x, ng, g, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fsumlCpp
SEXP fsumlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& w, bool narm, bool drop);
RcppExport SEXP _collapse_fsumlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fsumlCpp(x, ng, g, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fvarsdCpp
NumericVector fvarsdCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool stable_algo, bool sd);
RcppExport SEXP _collapse_fvarsdCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fvarsdCpp(x, ng, g, gs, w, narm, stable_algo, sd));
    return rcpp_result_gen;
END_RCPP
}
// fvarsdmCpp
SEXP fvarsdmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool stable_algo, bool sd, bool drop);
RcppExport SEXP _collapse_fvarsdmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP, SEXP sdSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fvarsdmCpp(x, ng, g, gs, w, narm, stable_algo, sd, drop));
    return rcpp_result_gen;
END_RCPP
}
// fvarsdlCpp
SEXP fvarsdlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool stable_algo, bool sd, bool drop);
RcppExport SEXP _collapse_fvarsdlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP, SEXP sdSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fvarsdlCpp(x, ng, g, gs, w, narm, stable_algo, sd, drop));
    return rcpp_result_gen;
END_RCPP
}
// varyingCpp
LogicalVector varyingCpp(const SEXP& x, int ng, const IntegerVector& g, bool any_group);
RcppExport SEXP _collapse_varyingCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP any_groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type any_group(any_groupSEXP);
    rcpp_result_gen = Rcpp::wrap(varyingCpp(x, ng, g, any_group));
    return rcpp_result_gen;
END_RCPP
}
// varyingmCpp
SEXP varyingmCpp(const SEXP& x, int ng, const IntegerVector& g, bool any_group, bool drop);
RcppExport SEXP _collapse_varyingmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP any_groupSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type any_group(any_groupSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(varyingmCpp(x, ng, g, any_group, drop));
    return rcpp_result_gen;
END_RCPP
}
// varyinglCpp
SEXP varyinglCpp(const List& x, int ng, const IntegerVector& g, bool any_group, bool drop);
RcppExport SEXP _collapse_varyinglCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP any_groupSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type any_group(any_groupSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(varyinglCpp(x, ng, g, any_group, drop));
    return rcpp_result_gen;
END_RCPP
}
// mrtl
SEXP mrtl(SEXP X, bool names, int ret);
RcppExport SEXP _collapse_mrtl(SEXP XSEXP, SEXP namesSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(mrtl(X, names, ret));
    return rcpp_result_gen;
END_RCPP
}
// mctl
SEXP mctl(SEXP X, bool names, int ret);
RcppExport SEXP _collapse_mctl(SEXP XSEXP, SEXP namesSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(mctl(X, names, ret));
    return rcpp_result_gen;
END_RCPP
}
// psmatCpp
SEXP psmatCpp(SEXP x, IntegerVector g, SEXP t, bool transpose);
RcppExport SEXP _collapse_psmatCpp(SEXP xSEXP, SEXP gSEXP, SEXP tSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(psmatCpp(x, g, t, transpose));
    return rcpp_result_gen;
END_RCPP
}
// pwNobsmCpp
IntegerMatrix pwNobsmCpp(SEXP x);
RcppExport SEXP _collapse_pwNobsmCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pwNobsmCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// qFCpp
SEXP qFCpp(SEXP x, bool sort, bool ordered, bool na_exclude);
RcppExport SEXP _collapse_qFCpp(SEXP xSEXP, SEXP sortSEXP, SEXP orderedSEXP, SEXP na_excludeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type sort(sortSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    Rcpp::traits::input_parameter< bool >::type na_exclude(na_excludeSEXP);
    rcpp_result_gen = Rcpp::wrap(qFCpp(x, sort, ordered, na_exclude));
    return rcpp_result_gen;
END_RCPP
}
// qGCpp
SEXP qGCpp(SEXP x, bool sort, bool ordered, bool na_exclude, bool retgrp);
RcppExport SEXP _collapse_qGCpp(SEXP xSEXP, SEXP sortSEXP, SEXP orderedSEXP, SEXP na_excludeSEXP, SEXP retgrpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type sort(sortSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    Rcpp::traits::input_parameter< bool >::type na_exclude(na_excludeSEXP);
    Rcpp::traits::input_parameter< bool >::type retgrp(retgrpSEXP);
    rcpp_result_gen = Rcpp::wrap(qGCpp(x, sort, ordered, na_exclude, retgrp));
    return rcpp_result_gen;
END_RCPP
}
// funique
SEXP funique(SEXP x, bool ordered);
RcppExport SEXP _collapse_funique(SEXP xSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(funique(x, ordered));
    return rcpp_result_gen;
END_RCPP
}
// seqid
IntegerVector seqid(const IntegerVector& x, const SEXP& o, int del, int start, bool na_skip, bool skip_seq, bool check_o);
RcppExport SEXP _collapse_seqid(SEXP xSEXP, SEXP oSEXP, SEXP delSEXP, SEXP startSEXP, SEXP na_skipSEXP, SEXP skip_seqSEXP, SEXP check_oSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type o(oSEXP);
    Rcpp::traits::input_parameter< int >::type del(delSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< bool >::type na_skip(na_skipSEXP);
    Rcpp::traits::input_parameter< bool >::type skip_seq(skip_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type check_o(check_oSEXP);
    rcpp_result_gen = Rcpp::wrap(seqid(x, o, del, start, na_skip, skip_seq, check_o));
    return rcpp_result_gen;
END_RCPP
}
// groupid
IntegerVector groupid(const SEXP& x, const SEXP& o, int start, bool na_skip, bool check_o);
RcppExport SEXP _collapse_groupid(SEXP xSEXP, SEXP oSEXP, SEXP startSEXP, SEXP na_skipSEXP, SEXP check_oSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type o(oSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< bool >::type na_skip(na_skipSEXP);
    Rcpp::traits::input_parameter< bool >::type check_o(check_oSEXP);
    rcpp_result_gen = Rcpp::wrap(groupid(x, o, start, na_skip, check_o));
    return rcpp_result_gen;
END_RCPP
}
// setAttributes
SEXP setAttributes(SEXP x, SEXP a);
RcppExport SEXP _collapse_setAttributes(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(setAttributes(x, a));
    return rcpp_result_gen;
END_RCPP
}
// setattributes
void setattributes(SEXP x, SEXP a);
RcppExport SEXP _collapse_setattributes(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    setattributes(x, a);
    return R_NilValue;
END_RCPP
}
// setAttr
SEXP setAttr(SEXP x, SEXP a, SEXP v);
RcppExport SEXP _collapse_setAttr(SEXP xSEXP, SEXP aSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(setAttr(x, a, v));
    return rcpp_result_gen;
END_RCPP
}
// setattr_clp
void setattr_clp(SEXP x, SEXP a, SEXP v);
RcppExport SEXP _collapse_setattr_clp(SEXP xSEXP, SEXP aSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    setattr_clp(x, a, v);
    return R_NilValue;
END_RCPP
}
// duplAttributes
SEXP duplAttributes(SEXP x, SEXP y);
RcppExport SEXP _collapse_duplAttributes(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(duplAttributes(x, y));
    return rcpp_result_gen;
END_RCPP
}
// duplattributes
void duplattributes(SEXP x, SEXP y);
RcppExport SEXP _collapse_duplattributes(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    duplattributes(x, y);
    return R_NilValue;
END_RCPP
}
// cond_duplAttributes
SEXP cond_duplAttributes(SEXP x, SEXP y);
RcppExport SEXP _collapse_cond_duplAttributes(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cond_duplAttributes(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cond_duplattributes
void cond_duplattributes(SEXP x, SEXP y);
RcppExport SEXP _collapse_cond_duplattributes(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    cond_duplattributes(x, y);
    return R_NilValue;
END_RCPP
}
// groups2GRPCpp
IntegerVector groups2GRPCpp(const List& x, int lx, const IntegerVector& gs);
RcppExport SEXP _collapse_groups2GRPCpp(SEXP xSEXP, SEXP lxSEXP, SEXP gsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type gs(gsSEXP);
    rcpp_result_gen = Rcpp::wrap(groups2GRPCpp(x, lx, gs));
    return rcpp_result_gen;
END_RCPP
}
// lassignCpp
List lassignCpp(const List& x, int s, const SEXP& rows, double fill);
RcppExport SEXP _collapse_lassignCpp(SEXP xSEXP, SEXP sSEXP, SEXP rowsSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(lassignCpp(x, s, rows, fill));
    return rcpp_result_gen;
END_RCPP
}
